import numpy as np

def build_divisibility_matrix(N):
    D = np.full((N+1, N+1), 1000.0)
    for n in range(2, N+1):
        for k in range(2, n):
            if n % k == 0:
                D[n, k] = 1.0
    return D

def fixed_point_iteration_log_domain(N, max_iter=1000, tol=1e-10):
    D = build_divisibility_matrix(N)
    X = np.ones(N-1)  # start all near prime
    for iteration in range(max_iter):
        DX = np.zeros_like(X)
        for i in range(N-1):
            n = i + 2
            s = 0.0
            for k in range(2, n):
                s += X[k-2] / D[n, k]
            DX[i] = s
        X_new = np.exp(-DX)
        diff = np.linalg.norm(X_new - X)
        X = X_new
        if diff < tol:
            break
    return X

def main():
    N = 1000
    X = fixed_point_iteration_log_domain(N)
    print("Number\tPrime likelihood")
    for i, val in enumerate(X):
        n = i + 2
        print(f"{n}\t{val:.5f} {'(prime?)' if val > 0.5 else '(composite?)'}")

if __name__ == "__main__":
    main()
