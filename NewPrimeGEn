import random
from sympy import isprime

# Miller-Rabin Primality Test (probabilistic)
def miller_rabin(n, k=5):
    """ Return True if n is a probable prime using Miller-Rabin Test, else False """
    if n < 2:
        return False
    if n == 2 or n == 3:
        return True
    if n % 2 == 0:
        return False

    # Write n-1 as d * 2^r
    d, r = n - 1, 0
    while d % 2 == 0:
        d, r = d // 2, r + 1

    # Test k times
    for _ in range(k):
        a = random.randint(2, n - 2)
        x = pow(a, d, n)  # a^d % n
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True

def generate_theoretical_prime(length):
    """
    Generate a theoretical prime number using the even/odd component structure.
    This assumes 3 even components and 1 odd component.
    """
    while True:
        # Generate components
        # First three components are even
        even_components = [random.choice([0, 2, 4, 6, 8]) * (10 ** i) for i in range(length - 1)]
        # Last component is odd
        odd_component = random.choice([1, 3, 5, 7, 9])

        # Combine the components
        candidate = sum(even_components) + odd_component

        # Check if the candidate is prime using Miller-Rabin test for efficiency
        if miller_rabin(candidate):
            return candidate

def generate_infinite_long_primes(start_length):
    """
    Continuously generate prime numbers with increasing lengths.
    This function will keep generating larger primes indefinitely.
    """
    length = start_length  # Starting length of the prime numbers
    while True:
        prime = generate_theoretical_prime(length)
        yield prime
        length += 1  # Increase the length for the next prime

# Example: Generate infinitely long primes starting with 5 digits
prime_generator = generate_infinite_long_primes(5)

# Print the first 5 primes
for _ in range(500):
    print(next(prime_generator))
