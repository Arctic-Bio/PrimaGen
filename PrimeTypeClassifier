import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
import networkx as nx
from scipy.stats import spearmanr
from sympy import primerange
import pandas as pd

#It seems to me like the reason that we cant defien primes and why they look so random is because theer are multiple varieties interspliced, and soem are much rarer than others, such thatc we need to identify the cluister types and isolate them so that we can get an acurate perdiction.

# Step 1: Generate a list of primes (first 1000 primes)
primes = list(primerange(2, 8000))[:1000]


# Step 2: Represent primes as vectors of digits
def prime_to_digit_vector(prime):
    """Convert a prime number to a vector of its digits."""
    return [int(digit) for digit in str(prime)]


# Convert all primes to digit vectors
digit_vectors = [prime_to_digit_vector(prime) for prime in primes]

# Step 3: Tensor Representation - Create a tensor of digit relationships
# We will create a tensor where each prime's digits represent a point in the tensor
max_digits = max(len(str(prime)) for prime in primes)
tensor = np.zeros((len(primes), max_digits))

for i, prime in enumerate(primes):
    digits = prime_to_digit_vector(prime)
    tensor[i, :len(digits)] = digits  # Fill tensor with prime digits

# Step 4: Manifold Learning using PCA and t-SNE
# PCA to reduce dimensions
pca = PCA(n_components=2)
pca_components = pca.fit_transform(tensor)

# t-SNE to map the data into a 2D space
tsne = TSNE(n_components=2)
tsne_components = tsne.fit_transform(tensor)

# Plotting PCA and t-SNE results
fig, axes = plt.subplots(1, 2, figsize=(15, 7))

axes[0].scatter(pca_components[:, 0], pca_components[:, 1], c='blue', label='PCA Components')
axes[0].set_title("PCA of Prime Digits")
axes[0].set_xlabel('Principal Component 1')
axes[0].set_ylabel('Principal Component 2')

axes[1].scatter(tsne_components[:, 0], tsne_components[:, 1], c='red', label='t-SNE Components')
axes[1].set_title("t-SNE of Prime Digits")
axes[1].set_xlabel('t-SNE Component 1')
axes[1].set_ylabel('t-SNE Component 2')

plt.tight_layout()
plt.show()

# Step 5: Graph Theory for Digit Relations
# Create a graph where digits at each place value are nodes
G = nx.Graph()

# Add nodes for each place value (units, tens, hundreds, etc.)
for i in range(max_digits):
    G.add_node(i)

# Add edges based on digit relationships
for i in range(1, len(primes)):
    for j in range(len(digit_vectors[i])):
        # Check for similarity in digits between adjacent primes
        if digit_vectors[i][j] == digit_vectors[i - 1][j]:
            G.add_edge(j, j)  # Self-connection (same digit across primes)

# Visualize the graph
plt.figure(figsize=(8, 8))
nx.draw(G, with_labels=True, font_weight='bold', node_color='skyblue', node_size=2000)
plt.title('Graph Representation of Digit Relations')
plt.show()


# Step 6: Statistical Modeling (Correlation between digits)
# We'll analyze correlations between digit positions and primality using Spearman's rank correlation
def calculate_digit_correlation(primes, max_digits):
    digit_matrix = np.zeros((len(primes), max_digits))

    for i, prime in enumerate(primes):
        digits = prime_to_digit_vector(prime)
        digit_matrix[i, :len(digits)] = digits

    correlations = np.zeros((max_digits, max_digits))

    for i in range(max_digits):
        for j in range(i, max_digits):
            correlations[i, j], _ = spearmanr(digit_matrix[:, i], digit_matrix[:, j])
            correlations[j, i] = correlations[i, j]

    return correlations


# Get correlations
correlations = calculate_digit_correlation(primes, max_digits)

# Plot heatmap of correlations
plt.figure(figsize=(10, 8))
plt.imshow(correlations, cmap='coolwarm', interpolation='none')
plt.colorbar(label="Spearman Correlation")
plt.title("Correlation of Digit Positions in Prime Numbers")
plt.xticks(range(max_digits), range(1, max_digits + 1))
plt.yticks(range(max_digits), range(1, max_digits + 1))
plt.show()

